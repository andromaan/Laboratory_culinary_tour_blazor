@page "/gastro_facility/create"
@using culinary_tour.Core.Entities
@using culinary_tour_blazor.ClientSide.HttpServices
@inject GastroFacilityHttpService GastroFacilityService
@inject FacilityTypesHttpService FacilityTypesService
@inject CuisinesHttpService CuisinesService
@inject NavigationManager Navigation

<h3>Новий Гастрозаклад</h3>

<div class="my-3">
    <div class="col-2"><label>Назва:</label></div>
    <div class="col-3"><input @bind="newItem.Name" class="form-control" /></div>
</div>

<div class="my-3">
    <div class="col-2"><label>Опис:</label></div>
    <div class="col-3"><textarea @bind="newItem.Description" class="form-control"></textarea></div>
</div>

<div class="my-3">
    <div class="col-2"><label>Тип:</label></div>
    <div class="col-3">
        <select @bind="newItem.TypeId" class="form-control">
            <option value="">- Оберіть тип -</option>
            @foreach (var type in Types)
            {
                <option value="@type.Id">@type.Name</option>
            }
        </select>
    </div>
</div>

<div class="my-3">
    <div class="col-2"><label>Кухні:</label></div>
    <div class="col-3">
        <select @onchange="OnCuisineSelectionChanged" class="form-control" multiple>
            @foreach (var cuisine in Cuisines)
            {
                @* <option value="@cuisine.Id" selected="@selectedCuisines.Contains(cuisine.Id)">@cuisine.Name</option> *@
                <option value="@cuisine.Id">@cuisine.Name</option>
            }
        </select>
    </div>
</div>

<div class="form-group mt-3">
    <InputFile OnChange="OnImageChange" accept="image/*" class="form-control" />
</div>
<div id="imagePreview" class="mt-2">
    <img src="@imagePreviewUrl" class="img-fluid" style="display: @(imagePreviewUrl != null ? "block" : "none");" />
</div>

<div class="my-3 float-end">
    <button class="btn btn-primary" @onclick="AddGastroFacility">Зберегти</button>
</div>

@code {
    private GastroFacility newItem = new GastroFacility();
    private List<FacilityType> Types = new List<FacilityType>();
    private List<Cuisine> Cuisines = new List<Cuisine>();
    private List<int> selectedCuisines = new List<int>();
    private string? imagePreviewUrl;

    protected override async Task OnInitializedAsync()
    {
        Types = await FacilityTypesService.GetAllAsync();
        Cuisines = await CuisinesService.GetAllAsync();
    }

    private async Task AddGastroFacility()
    {
        newItem.Cuisines = Cuisines.Where(c => selectedCuisines.Contains(c.Id)).ToList();
        await GastroFacilityService.AddAsync(newItem);
        Navigation.NavigateTo("/gastro_facility");
    }

    private async Task OnImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        newItem.Photo = buffer;

        var base64 = Convert.ToBase64String(buffer);
        imagePreviewUrl = $"data:image/png;base64,{base64}";
    }

    private void OnCuisineSelectionChanged(ChangeEventArgs e)
    {
        var selectedOptions = ((IEnumerable<string>)e.Value).Select(int.Parse).ToList();
        selectedCuisines = selectedOptions;
    }
}
